#socket通常也称作"套接字"，用于描述IP地址和端口，是一个通信链的句柄，
#应用程序通常通过"套接字"向网络发出请求或者应答网络请求。

from PyQt5 import QtWidgets
from tcp_udp_web_tools import tcp_udp_web_ui #引入界面
import socket
import threading
import sys
import stopThreading#强制退出线程.py


class TcpLogic(tcp_udp_web_ui.ToolsUi):#继承界面ToolsUi
    def __init__(self, num):                         #初始化
        super(TcpLogic, self).__init__(num)
        self.tcp_socket = None
        self.sever_th = None
        self.client_th = None
        self.client_socket_list = list()

        self.link = False  # 用于标记是否开启了连接

    def tcp_server_start(self):   #服务端对应多个客户端，因此可以储存多个客户端对象，需要对每个客户端发送的数据进行读取
        """
        功能函数，TCP服务端开启的方法
        :return: None
        """
        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  #生成一个TCP的套接字功能，用于收发数据
        # 取消主动断开连接四次握手后的TIME_WAIT状态
        self.tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # 设定套接字为非阻塞式
        self.tcp_socket.setblocking(False)
        try:
            port = int(self.lineEdit_port.text())  #self.lineEdit显示port端口号
            self.tcp_socket.bind(('', port))  #s.bind(address) 将套接字绑定到地址。address地址的格式取决于地址族。
                                                            #在AF_INET下，以元组（host,port）的形式表示地址。
        except Exception as ret:     #检查异常ret
            msg = '请检查端口号\n'
            self.signal_write_msg.emit(msg)     #发送异常信号 signal_write_msg
        else:                                    #如果没有异常就执行else，finally是最后一定会执行的
            self.tcp_socket.listen()  #sk.listen(backlog)  开始监听传入连接。
                                                #backlog指定在拒绝连接之前，可以挂起的最大连接数量。
            self.sever_th = threading.Thread(target=self.tcp_server_concurrency)  #服务端线程，设置线程为守护线程,
                                                                                                                           #防止退出主线程时,子线程仍在运行
            self.sever_th.start()             #开启服务端线程
            msg = 'TCP服务端正在监听端口:%s\n' % str(port)
            self.signal_write_msg.emit(msg)

    def tcp_server_concurrency(self):
        """
        功能函数，供创建线程的方法；
        使用子线程用于监听并创建连接，使主线程可以继续运行，以免无响应
        使用非阻塞式并发用于接收客户端消息，减少系统资源浪费，使软件轻量化
        :return:None
        """
        while True:
            try:
                client_socket, client_address = self.tcp_socket.accept()   #返回客户端的IP和端口的元组
            except Exception as ret:
                pass
            else:
                client_socket.setblocking(False)   # 设定套接字为非阻塞式
                # 将创建的客户端套接字存入列表,client_address为ip和端口的元组
                self.client_socket_list.append((client_socket, client_address))
                msg = 'TCP服务端已连接IP:%s端口:%s\n' % client_address
                self.signal_write_msg.emit(msg)
            # 轮询客户端套接字列表，接收数据
            for client, address in self.client_socket_list:   #对列表中的端口和IP进行数据接受，因为这是服务端，对应多个客户端
                try:
                    recv_msg = client.recv(1024)  #sk.recv(bufsize[,flag]) 接受套接字的数据。数据以字符串形式返回，
                                                                   #bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。
                except Exception as ret:
                    pass
                else:
                    if recv_msg:
                        msg = recv_msg.decode('utf-8')  #转化为可显示格式
                        msg = '来自IP:{}端口:{}:\n{}\n'.format(address[0], address[1], msg)
                        self.signal_write_msg.emit(msg)
                    else:
                        client.close()          #如果没有接受到socket的端口和IP数据，则关闭当前客户端端口
                        self.client_socket_list.remove((client, address))


    def tcp_client_start(self):
        """
        功能函数，TCP客户端连接其他服务端的方法
        :return:
        """
        self.tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  #生成一个TCP的套接字功能，用于收发数据
        try:
            address = (str(self.lineEdit_ip_send.text()), int(self.lineEdit_port.text()))   #self.lineEdit_ip_send:目标IP地址
                                                                                                                            #端口
        except Exception as ret:                               #异常处理
            msg = '请检查目标IP，目标端口\n'
            self.signal_write_msg.emit(msg)
        else:     #无异常，则连接服务器
            try:
                msg = '正在连接目标服务器\n'    
                self.signal_write_msg.emit(msg)
                self.tcp_socket.connect(address)    #连接到目标IP和端口
            except Exception as ret:                      #异常处理
                msg = '无法连接目标服务器\n'
                self.signal_write_msg.emit(msg)
            else:
                self.client_th = threading.Thread(target=self.tcp_client_concurrency, args=(address,))  #服务端线程，设置线程为守护线程,
                                                                                                                           #防止退出主线程时,子线程仍在运行
                self.client_th.start()                                                    #开启线程
                msg = 'TCP客户端已连接IP:%s端口:%s\n' % address
                self.signal_write_msg.emit(msg)

    def tcp_client_concurrency(self, address):
        """
        功能函数，用于TCP客户端创建子线程的方法，阻塞式接收
        :return:
        """
        while True:
            recv_msg = self.tcp_socket.recv(1024)
            if recv_msg:
                msg = recv_msg.decode('utf-8')
                msg = '来自IP:{}端口:{}:\n{}\n'.format(address[0], address[1], msg)
                self.signal_write_msg.emit(msg)
            else:
                self.tcp_socket.close()
                self.reset()
                msg = '从服务器断开连接\n'
                self.signal_write_msg.emit(msg)
                break

    def tcp_send(self):
        """
        功能函数，用于TCP服务端和TCP客户端发送消息
        :return: None
        """
        if self.link is False:                #前面定义了，是标志位，标记是否建立连接
            msg = '请选择服务，并点击连接网络\n'
            self.signal_write_msg.emit(msg)
        else:
            try:
                send_msg = (str(self.textEdit_send.toPlainText())).decode('utf-8')
                if self.comboBox_tcp.currentIndex() == 0:     #服务端向客户端发送数据
                    for client, address in self.client_socket_list:  #有多个服务端，因此循环IP和端口列表
                        client.send(send_msg)
                    msg = 'TCP服务端已发送\n'
                    self.signal_write_msg.emit(msg)
                if self.comboBox_tcp.currentIndex() == 1:     #0代表服务端，1代表客户端，此处客户端向服务端发送
                    self.tcp_socket.send(send_msg)                  #tcp_socket是定义的一个套接字功能，用于收发数据
                    msg = 'TCP客户端已发送\n'
                    self.signal_write_msg.emit(msg)
            except Exception as ret:
                msg = '发送失败\n'
                self.signal_write_msg.emit(msg)

    def tcp_close(self):
        """
        功能函数，关闭网络连接的方法
        :return:
        """
        if self.comboBox_tcp.currentIndex() == 0:    #如果是服务端点击退出
            try:
                for client, address in self.client_socket_list:   #关闭所有客户端
                    client.close()
                self.tcp_socket.close()              #tcp_socket不特指客户端或是服务端功能，而是一个套接字功能
                if self.link is True:
                    msg = '已断开网络\n'
                    self.signal_write_msg.emit(msg)
            except Exception as ret:
                pass
        if self.comboBox_tcp.currentIndex() == 1:
            try:
                self.tcp_socket.close()
                if self.link is True:
                    msg = '已断开网络\n'          #这里是不是有问题？应该是false啊！！！！！！！！！！！！！！！！！！！！！！
                    self.signal_write_msg.emit(msg)
            except Exception as ret:
                pass
        try:
            stopThreading.stop_thread(self.sever_th)    #停止服务器线程
        except Exception:
            pass
        try:
            stopThreading.stop_thread(self.client_th)    #停止客户端线程
        except Exception:
            pass


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = TcpLogic(1)
    ui.show()
    sys.exit(app.exec_())